<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2022/07/09/test/"/>
      <url>/2022/07/09/test/</url>
      
        <content type="html"><![CDATA[<p>Dads        <span class="lazyload-img-span">        <img              data-src="/2022/07/09/test/13.png" >        </sapn>      </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/07/hello-world/"/>
      <url>/2022/07/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo_Themes</title>
      <link href="/2022/07/07/Hexo%20_Themes/"/>
      <url>/2022/07/07/Hexo%20_Themes/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。这个是模版的<a href="https://fushaolei.github.io/hexo-theme-white/archives/">网站</a></p><h3 id="white主题配置（目前只学会用一个）"><a href="#white主题配置（目前只学会用一个）" class="headerlink" title="white主题配置（目前只学会用一个）"></a><a href="https://github.com/MagicTmac1/hexo-theme-white">white</a>主题配置（目前只学会用一个）</h3><p>进入站点目录下的themes目录，将主题包下载到本地，然后修改站点配置文件_config.yml中的theme为下载下来的主题包的名字（<strong>这两个一定要相同！</strong>）</p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote><p>其实config文件里写的很明白了，现在就重新列一下，添加一些不必要的说明</p></blockquote><h3 id="可自定义style"><a href="#可自定义style" class="headerlink" title="可自定义style"></a>可自定义style</h3><pre><code class="yml">############## style ##############style:  layout:    max-width: 1130px #总体宽度    post-max-width: 800px #文章内容宽度  color:    theme-main: &quot;#1A98FF&quot; # 主色调    theme-secondary: &quot;#DDF0FF&quot; # 次色调    text-main: &quot;#333333&quot; # 文字主色调    text-secondary: &quot;#898FA0&quot; # 文字次色调  animation:    open: true # 如果开启动画的话会引入animation.css</code></pre><h3 id="主页配置"><a href="#主页配置" class="headerlink" title="主页配置"></a>主页配置</h3><h4 id="home页和archive可选配置"><a href="#home页和archive可选配置" class="headerlink" title="home页和archive可选配置"></a>home页和archive可选配置</h4><pre><code class="yml"># home页可选类型home:  type: &quot;img&quot; # 主页的类型，可选 home | img | simple# archive页可选类型archive:  type: &quot;simple&quot; # archive的类型，可选 img | simple</code></pre><p>type为home就是一个封面，为img就是图片加标题的形式，simple就是极简模式</p><h3 id="随机cover"><a href="#随机cover" class="headerlink" title="随机cover"></a>随机cover</h3><p>当你懒的找封面而又想用img模式的时候，我为你准备了些随机封面</p><pre><code class="yml">archive_img_mode:  default_cover: #默认的cover    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/01.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/02.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/03.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/04.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/05.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/06.jpg</code></pre><blockquote><p>图片均来自于bing的每日图片，版权归图片原作者所有，我只是搬到了自己的仓库方便使用，如果有侵犯到你的权益，请和我联系 ( •̀ ω •́ )</p></blockquote><h3 id="浏览器标签页配置"><a href="#浏览器标签页配置" class="headerlink" title="浏览器标签页配置"></a>浏览器标签页配置</h3><pre><code class="yml"># iconicon:  #标签页图标，这里可填链接（可以直接将图片地址拿过来，我拿的百度小黄鸭的）#  headersite_name: white（对应下面的这个浏览器标签）</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/MyBlog/source/_posts/imgs/image-20220707223848938.png" >        </sapn>      </p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><pre><code class="yml">menu:  HOME: /  BLOG: /archives</code></pre><h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><pre><code class="yml">## 本地搜索search:  open: false # 是否开启  page: /search # 页面路径（通常命名为search）</code></pre><p>如果你想使用的话，请先到根目录执行</p><pre><code class="npm">npm install hexo-generator-search --save</code></pre><p>然后新建一个名为search的page</p><pre><code class="npm">hexo new page &quot;search&quot;</code></pre><p>进入这个文件夹，更改它的<code>index.md</code>文件，示例如下</p><pre><code class="md">---layout: searchcover: #你还可以自定义cover---</code></pre><p>然后将open设置为true即可开启</p><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><blockquote><p>当你的home页有用到type home模式的话 请配置此项</p></blockquote><pre><code class="yml"># 自我介绍intro:  title: Hi.I&#39;m White.  sub: &#39;A [White](https://github.com/FuShaoLei/hexo-theme-white) theme for [Hexo](http://hexo.io/)&#39; # markdown语法  avator: https://cdn.jsdelivr.net/gh/fushaolei/img/20200524104925.jpg #头像 暂时还没用到  author: white #所有文章的默认作者</code></pre><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><pre><code class="yml">#联系方式  #更多图标：https://remixicon.com/contact:  Github:    - https://github.com/MagicTmac1/hexo-theme-white    - ri-github-line  Email:     - mailto:ouyangcan@163.com    - ri-mail-line</code></pre><p>格式就是</p><pre><code class="yml">名字:  - 链接  - 图标 </code></pre><h3 id="文章toc设置"><a href="#文章toc设置" class="headerlink" title="文章toc设置"></a>文章toc设置</h3><pre><code class="yml"># 文章toc索引栏设置toc:  open: true # 是否开启  side: true  # 选择toc的位置，填true的话toc将会显示在文章的侧边，填false的话 toc将出现在文章的开头  max: 2 #最大深度  min: 2 #最小深度</code></pre><p>其中side如果设置为false的话，将会出现在文章的top部分，如果设置为true的话，将会出现在侧边 min设置的是最小深度，max设置的是最大深度，<del>如上面配置所示，min为2，说明h2索引是至少要出现的，不会出现h1索引 （ 突然不知道怎么表达，</del> 如果不理解的话建议你试试 😂</p><h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><p>代码高亮，想要使用代码高亮，得先把根目录的**<code>_config.yml</code>里的highlight的enable置成false**</p><pre><code class="yml"># 插件plugins:  highlightjs:    js: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.1/build/highlight.min.js    css: https://cdn.jsdelivr.net/npm/highlight.js@10.1.1/styles/github.css    # more: https://www.jsdelivr.com/package/npm/highlight.js?path=styles</code></pre><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><pre><code class="yml"># 评论系统设置comments:  open: false #是否开启评论系统  system: gitalk #选择评论系统 可选 valine gitalk livere  # Valine  valine:    appid: #Leancloud应用的AppID  这里和下面的要换成你自己的啊QAQ    appkey: #Leancloud应用的AppKey    verify: false #验证码    notify: true #评论回复提醒    avatar: robohash #评论列表头像样式：&#39;&#39;/mm/identicon/monsterid/wavatar/retro/hide    #头像类型可见： https://valine.js.org/avatar.html    placeholder: 留下你来过的痕迹~ #评论框占位符  # Gitalk  gitalk:    owner:  #Github 用户名,    repo:  #储存评论issue的github仓库名    admin:  #Github 用户名    clientID:  #`Github Application clientID`    clientSecret: #`Github Application clientSecret`  #livere  livere: # 前往 http://livere.com/ 申请账号    dataId: city #免费版本city    dataUid: #安装代码中 data-uid 后面数据</code></pre><h3 id="Gitalk配置教程"><a href="#Gitalk配置教程" class="headerlink" title="Gitalk配置教程"></a>Gitalk配置教程</h3><p>先配置一下 Git <a href="https://github.com/settings/developers">https://github.com/settings/developers</a> 然后选择 OAuth Apps 点击 New OAuth App，</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/MyBlog/source/_posts/imgs/image-20220707230340057.png" >        </sapn>      <p>这里注意HomePage URL和callback URL一定要一样！</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/MyBlog/source/_posts/imgs/image-20220707230415924.png" >        </sapn>      <p>做完这些基本就ok了，然后点进去绑定初始化一下，就完成啦！</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/MyBlog/source/_posts/imgs/image-20220707230649318.png" >        </sapn>      <blockquote><p><strong>这里写一下遇到的一些问题吧</strong></p><p>gitalk的坑，一个是repo这里 写的应该是<strong>仓库名</strong>，而不是仓库链接或者其他的东西，然后gitalk要上线部署一次才可以，md文件名字最好用英文来命名，如果用中文的话，超出50个字符将会初始化失败，<a href="https://blog.csdn.net/Keith_Prime/article/details/111604291">Gitalk Error: Validation Failed</a>。</p><p>在讲gitalk进行初始化的时候，repo其实不需要重新创建一个仓库（我一开始创建了一个仓库，写的那个仓库的名称，一直出现那个<code>NetWork Error</code>的报错，后来我改成我用来当站点的那个仓库的名称就ok了🤔）</p><p>当我试着把原来的中文名称改为英文时，出现了404的错误，要记得把下图所示的两个地方改为相同的，不然就会出错。将md文件名重新换一个名字，md文档里面的<code>title</code>也要更换。再进行<code>hexo cl</code>、<code>hexo g</code> 、<code>hexo d</code>。</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/MyBlog/source/_posts/imgs/image-20220707224539518.png" >        </sapn>      </blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code class="yml"># 页脚footer: Power by [Hexo](http://hexo.io/) Theme by [White](https://github.com/FuShaoLei/hexo-theme-white) # markdown语法#有分类时是否开启menu分类页和自定义名字menu_categories:  open: true  name: 分类#可自定义归档标签页名字 archive_tab_name: Blog#图片懒加载lazyload:  open: true #是否开启</code></pre><p>这里就不bb了 大家应该看的懂</p><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>因为主题的更新比较频繁，所以如果你想舒服用到最新的版本的话，就请使用平滑升级</p><ol><li>在你<strong>根目录</strong>下的<code>source</code>文件夹下新建一个名为<code>_data</code>的<strong>文件夹</strong></li><li>复制<strong>主题文件夹</strong>下的<code>_config.yml</code>到<code>_data</code>文件夹下，重命名为<code>white.yml</code></li></ol><p>好了，到这里差不多完成了，以后你需要改动什么，只需要在这个<code>white.yml</code>中进行修改(在编译时，会自动将此替换<code>_config.yml</code>)</p><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>当你看到我的主题有<a href="https://github.com/FuShaoLei/hexo-theme-white/issues/3">变更</a>时，在主题文件中执行<code>git pull</code>拉取最新代码 然后，对比最新主题文件夹下的<code>_config.yml</code> 看看有无新增什么东西，添加到你的<code>white.yml</code>中即可</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo blog build</title>
      <link href="/2022/07/07/Github+Hexo%20blog%20build%20/"/>
      <url>/2022/07/07/Github+Hexo%20blog%20build%20/</url>
      
        <content type="html"><![CDATA[<p>前期准备</p><pre><code>1. Github账号，并创建一个置顶名字的远程仓库。2. Homebrew套件管理器3. Node，Git，Hexo4. NexT主题配置</code></pre><h2 id="1-Github上创建远程仓库"><a href="#1-Github上创建远程仓库" class="headerlink" title="1.Github上创建远程仓库"></a>1.Github上创建远程仓库</h2><p>首先要在Github上创建一个新的指定命名的远程仓库（当然没有账号要先注册啦）</p><p>按照如图所示的方式创建Repository。dsa</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707112250630.png" >        </sapn>      <p><strong>使用Git Pages配置远程仓库</strong><br>在不购买服务器的前提下，我们的网站需要挂在<a href="https://pages.github.com/">GitHub Pages</a>上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。</p><p>进入GitHub Pages里面有帮助文档，一步步做，完成后就能在浏览器打开<a href="http://username.github.io了./">http://username.github.io了。</a></p><p>我这里使用ssh，因为后续不需要再次使用密码进行部署。</p><pre><code>1.cd ~/.ssh2.ssh-keygen -t rsa -C &quot;ouyangcan0127@163.com&quot;</code></pre><p>然后一直回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH 公钥 ：将刚复制的内容粘贴到那里，title随便填，保存。</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707112105637.png" >        </sapn>              <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707112954229.png" >        </sapn>      <h2 id="2-HomeBrew-Git-hexo-npm套件安装"><a href="#2-HomeBrew-Git-hexo-npm套件安装" class="headerlink" title="2.HomeBrew ,Git,hexo,npm套件安装"></a>2.HomeBrew ,Git,hexo,npm套件安装</h2><pre><code>1.自行安装homebrew，然后可通过brew安装git和node.jsbrew install gitbrew install node</code></pre>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707105424122.png" >        </sapn>      <pre><code>2.npm install -g hexo-cli  </code></pre><p>安装Hexo<br>安装完Node.js 及 Git 后，即可使用npm来安装Hexo：</p><pre><code>$ npm install -g hexo-cli  </code></pre><p>初始化Hexo<br>创建一个目录用来作为你的blog目录，例如 blog；并在该目录中进行Hexo的初始化：</p><pre><code>$ hexo init blog(可能会卡顿，卡顿的话就先创建blog文件夹，进入blog进行hexo init)$ cd ~/blog/$ npm install</code></pre>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707110019450.png" >        </sapn>      <p>新建完成后，得到以下目录：</p><pre><code>·|-- _config.yml|-- package.json|-- scaffolds|-- source|   |-- _drafts|   |-- _posts|-- themes</code></pre><p>至此，你就完成了Hexo的安装及初始化，接下来我们就可以进行本地的预览啦：<br>先安装hexo server</p><pre><code>$ npm install hexo-server</code></pre><p>然后生成静态页面并打开hexo本地服务</p><pre><code>$ hexo generate   (或 hexo g)$ hexo server</code></pre>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707110200235.png" >        </sapn>      <p>按命令行提示，打开 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到默认主题的默认页面了。<br>可能加载会很慢，因为默认主题中使用了些Google的资源，后面更换主题就会快很多了。</p>        <span class="lazyload-img-span">        <img              data-src="/Users/ouyangcan/Library/Application Support/typora-user-images/image-20220707110238721.png" >        </sapn>      <h2 id="3-配置远程仓库"><a href="#3-配置远程仓库" class="headerlink" title="3.配置远程仓库"></a>3.配置远程仓库</h2><p>打开前面创建的blog目录下的 <strong>_config.yml</strong> 文件，在修改最下方的<strong>deploy</strong>为：（<strong>注意，冒号后面一定要加空格</strong>）</p><pre><code>deploy:  type: git  repo: git@gitee.com:ouyang-can/blog.github.io.git(这里填ssh链接)  branch: main（这里不要写master了，那是老版本）</code></pre><p>下来安装hexo的git部署，在命令行中执行：</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>最后，将生成静态页面并部署到github的仓库中，执行：</p><pre><code>$ hexo d -g 或者$ hexo generate$ hexo deploy</code></pre><p>当提示 <strong>INFO Deploy done: git</strong> 即上传成功，这时就可以通过仓库地址来访问你的个人站点了。<br>![image-20220707114048838](&#x2F;Users&#x2F;ouyangcan&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220707114048838.png)</p><h3 id="常用Hexo命令"><a href="#常用Hexo命令" class="headerlink" title="常用Hexo命令"></a>常用Hexo命令</h3><pre><code>hexo init       //在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件hexo new “my new blog title”   //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 hexo new page &lt;pagename&gt;  //新建一个网页。生成网页后的路径会在终端中有提示default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。hexo clean      // 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存hexo generate   // 可以简写成hexo g 根据markdown文件生成静态文件hexo server     // 或者简写成hexo s 启动本地hexo 服务器，默认localhost:4000可以访问hexo deploy     // 或者简写成hexo d 将本地修改，部署到远端hexo version    // 显示hexo版本</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
