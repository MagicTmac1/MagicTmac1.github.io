<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go面试错题</title>
      <link href="/2022/07/21/go%E9%9D%A2%E8%AF%95%E9%94%99%E9%A2%98/"/>
      <url>/2022/07/21/go%E9%9D%A2%E8%AF%95%E9%94%99%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Golang可以复用C-x2F-C-的模块，这个功能叫Cgo-这一说法是否正确。"><a href="#Golang可以复用C-x2F-C-的模块，这个功能叫Cgo-这一说法是否正确。" class="headerlink" title="Golang可以复用C&#x2F;C++的模块，这个功能叫Cgo,这一说法是否正确。"></a>Golang可以复用C&#x2F;C++的模块，这个功能叫Cgo,这一说法是否正确。</h4><p>不正确，Cgo不支持C++，但是可以通过C来封装C++的方法实现Cgo调用。</p><h4 id="对于以下代码，描述正确的是"><a href="#对于以下代码，描述正确的是" class="headerlink" title="对于以下代码，描述正确的是:"></a>对于以下代码，描述正确的是:</h4><pre><code>package mainimport (    &quot;fmt&quot;    &quot;sync&quot;)func main() &#123;    var wg sync.WaitGroup    intSlice := []int&#123;1, 2, 3, 4, 5&#125;    wg.Add(len(intSlice))    ans1, ans2 := 0, 0    for _, v := range intSlice &#123;        vv := v        go func() &#123;            defer wg.Done()            ans1 += v            ans2 += vv        &#125;()    &#125;    wg.Wait()    fmt.Printf(&quot;ans1:%v,ans2:%v&quot;, ans1, ans2)    return&#125;</code></pre><pre><code>ans1不一定是 15， ans2 不一定是 15.</code></pre><p>闭包只是绑定的v这个变量，当goruntine执行时可能for循环已经执行，v的值已经变化。</p><p>个人理解可能当其中一个v赋值为1时，另外一个goruntine中的v也是1，不一定满足1+2+3+4+5。</p><h4 id="关于slice或map操作，下面正确的是（）"><a href="#关于slice或map操作，下面正确的是（）" class="headerlink" title="关于slice或map操作，下面正确的是（）"></a>关于slice或map操作，下面正确的是（）</h4><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207211831356.png" >        </sapn>      </p><pre><code>A，C，D</code></pre><p>make只用来创建slice,map,channel。 其中map使用前必须初始化。 append可直接动态扩容slice，也就是说空切片可以直接append，而map不行。</p><h4 id="关于go-vendor，下面说法正确的是（"><a href="#关于go-vendor，下面说法正确的是（" class="headerlink" title="关于go vendor，下面说法正确的是（"></a>关于go vendor，下面说法正确的是（</h4><pre><code>A。基本思路是将引用的外部包的源代码放在当前工程的vendor目录下面B。编译go代码会优先从vendor目录先寻找依赖包C。可以指定引用某个特定版本的外部包D。有了vendor目录后，打包当前的工程代码到其他机器的$GOPATH/src下都可以通过编译</code></pre><pre><code>A，B，D</code></pre><p>go vendor无法精确的引用外部包进行版本控制，不能指定引用某个特定版本的外部包；只是在开发时，将其拷贝过来，但是一旦外部包升级,vendor下的代码不会跟着升级，而且vendor下面并没有元文件记录引用包的版本信息，推荐go mod ，go mod 已经完美支持各模块的版本控制。</p>]]></content>
      
      
      <categories>
          
          <category> 面试错题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试错题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/15/%E5%9C%A8%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%AD%E5%BE%80%E5%BE%80%E9%9C%80%E8%A6%81%E9%9D%A2%E5%AF%B9%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9A/"/>
      <url>/2022/07/15/%E5%9C%A8%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%AD%E5%BE%80%E5%BE%80%E9%9C%80%E8%A6%81%E9%9D%A2%E5%AF%B9%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>在我们进行数据传输中往往需要面对如下图所示的一些问题：![截屏2022-07-14 21.12.31](&#x2F;Users&#x2F;ouyangcan&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2022-07-14 21.12.31.png)</p><p>对称加（解）密的三要素：</p><p><em>明文（发送的数据）、加密算法（以什么样的规则进行加密，常用的des、3des、aes）、密钥（根据算法的不同，密钥的长度不同）</em>。解密与之相反</p><p>这里介绍一个经典的对称加密算法：凯撒算法</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207142126445.png" >        </sapn>      </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客遇到的问题</title>
      <link href="/2022/07/09/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/09/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="使用MarkDown的相关问题"><a href="#使用MarkDown的相关问题" class="headerlink" title="使用MarkDown的相关问题"></a>使用MarkDown的相关问题</h4><p>在写文章的时候，我们可以插入图片和相关资源使得文章更加丰富生动，但是在本地写<code>MarkDown</code>文件时，上传的本地图片是无法实现在网络上或是在另外一台设备上访问的。我在完成基于github使用hexo博客的搭建后，我发现了一些问题，关于 gitalk评论模块的一些坑我已经写在<a href="https://magictmac1.github.io/2022/07/07/Hexo%20_Themes/">themes</a>那片博客里了，剩下的一些写在这里。</p><h4 id="文章内容显示不全"><a href="#文章内容显示不全" class="headerlink" title="文章内容显示不全"></a>文章内容显示不全</h4><p>​        我在生产部署之后进行 <code>hexo s</code> 本地测试的时候发现我的使用了图片的文章都显示不全，而且很统一的在文章第一个出现图片的地方之后就不显示接下来的内容了，而没有图片的hexo初始化就自带的 <code>hello world </code> 就没有出现这样的情况，因为已经修复了就不放bug图了，直接说解决方法吧。</p><h4 id="办法一：同名目录-相对路径"><a href="#办法一：同名目录-相对路径" class="headerlink" title="办法一：同名目录 + 相对路径"></a>办法一：同名目录 + 相对路径</h4><p>​在使用<code>Hexo</code>写博客时，每一篇文章创建一个同名目录，并在这个同名目录中放置需要插入的图片文件，在<code>MarkDown</code>文章中插入使用图片的相对路径，然后在部署博客的时候也一同将这个文件夹上传到服务器。</p><ol><li><p>修改配置文件<code>_config.yml</code>使得每一次新建文章的时候自动生成同名目录。（方法二中其实就不需要这个选项了，使用方法二可以改为false）</p><pre><code>post_asset_folder: true</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102347474.png" >        </sapn>      </p></li></ol><p>2.修改MarkDown编辑器配置，实现粘贴图片时自动将图片文件复制一份到所对应的同名目录。</p><p>我使用的Typora编辑MarkDown文件，通过<code>ctrl + ,</code> 打开Typora的设置，并按图片中完成相关设置。</p><pre><code>./$&#123;filename&#125;</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102351926.png" >        </sapn>      </p><p>完成这样的设置后，每当我们在<code>Typora</code>中粘贴图片的时候就会将图片复制到同名目录下。</p><p>但是需要注意的是，这样上传到<code>Hexo</code>依旧不能解决图片无法访问的问题，因为图片的路径还是本地的路径，只是这个图片所属的本地的文件夹是和文章同名的。        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102351025.png" >        </sapn>      </p><p>解决办法：将绝对路径变成相对路径，这样在<code>Hexo</code>服务器上就会自动的在与文章同名的那个文件夹里面找图片文件，所以只需要删去前面的一部分，只留下图片的文件名。</p><p>这样做可以实现在博客上能展现图片了，但是有一个弊端就是本地是看不见图片的了。本地效果如下：        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102352359.png" >        </sapn>      </p><p>总结这个方法：</p><p>本地看不到图片的效果，但是上传至Hexo后是可以查看的，能解决Hexo上查看本地图片的问题。<br>但是仍然不能解决Hexo以外的诸多博客平台的本地图片访问问题，对于CSDN、简书来说它都有自己的图床，所以可以上传到对应平台的图床，然后用网络的链接访问图片。<br>使得Hexo文件变得臃肿，随着博客文章的积累，用到的图片会在每次部署和上传到服务器时一并被携带上传，造成部署和上传的压力，使得上传的速度变得很慢。<br>由于博客部署在GitHub Pages，就会导致加载博客文章时，一大部分时间用于请求Github Pages服务器加载图片文件，再加上Github Pages服务器在大陆访问有时很慢的情况，使得博客网页加载奇慢无比。<br>综上，这个办法并不是长久有效的。</p><h4 id="方法二：Github-PicGo"><a href="#方法二：Github-PicGo" class="headerlink" title="方法二：Github + PicGo"></a>方法二：Github + PicGo</h4><p>因为上一个方法每一次都需要重新将之前的图片资源重复部署，导致速度越来越慢，不是一个一劳永逸的方法，所以我找到了更好的方法，那就是使用<strong>图床</strong>。</p><p>图床网上也有很多免费的，但是大部分都不靠谱，如果放在免费的图床上我们需要米娜对一一些问题：</p><ol><li>网络图床有可能突然就不维护了，那么我们放的图片也就不翼而飞了，而如果你的图片又没有备份的话，那么所有用到这些图片的文件都会被涉及到，这些图片也就访问不了，消失在网络的大海里。</li><li>免费的图床有额度限制，一般可用的空间不会太大。</li><li>本地写文章时不够简便，需要每张图片手动上传。</li></ol><p>但是我扣，所以我选择全球最大的同性交友网站Github作为免费床图😁，接下来讲一下操作流程。</p><h4 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h4><ul><li>首先创建一个专门用来保存博客上传图片的仓库，基本操作就不演示了。</li><li>然后我们生成GitHub Tokens，点击<code>Settings</code>，进入Settings后，点击左侧下方的<code>Developer settings</code>，网页跳转后，选左边的<code>Personal access tokens</code>，点击<code>Generate a personal access token</code>，<code>Note</code>这里填写为什么创建这个Token，可随意填写，下方勾上<code>repo</code>即可。然后滑到最下方点击<code>Generate token</code>。然后会生成一条Token信息，生成的Token只会出现一次，记得复制保存。（省略了一些简单的步骤的截图，大家应该都懂）</li></ul><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102319201.png" >        </sapn>              <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102321616.png" >        </sapn>              <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102326868.jpg" >        </sapn>      </p><h4 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h4><ul><li><p>打开Typora，点击左上角菜单栏的<code>Typora</code>，点击弹出框里下方的<code>偏好设置</code>，（macOS是这样，Win的自行搜索）设置成如下。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102329445.png" >        </sapn>      </p></li></ul><h4 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h4><p>  打开运行PicGo，左侧打开打开详细窗口，选择图床设置（Github图床）。<br>  参数设置说明：</p><p>  仓库名：表示远程仓库地址，固定格式 Github用户名&#x2F;仓库名，前期准备用到的仓库<br>  分支名：表示分支，默认填入master，需要根据自己Github上的分支进行填写，看个人设置<br>  Token：填入Github中生成的Token，就是让复制保存的那个<br>  存储路径：可以自定义一个文件路径<br>  自定义域名：建议使用https:cdn.jsdelivr.net&#x2F;gh&#x2F;Github用户名&#x2F;仓库名<br>  最后记得设为默认图床，然后在正式使用的时候会进行i个测试，会告诉你测试结果是否成功。（macOS和Win不一样，WIn好像设置里有测试的选项，macOS没有）我是测试完了之后再写的，所以没有截图。<br>          <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102332415.png" >        </sapn>      </p><p>完成上述的步骤就完成所以的配置了，可以<code>hexo new test</code>新建一个文件上传图片测试一下了，</p><h4 id="Tips：快捷键及相关配置"><a href="#Tips：快捷键及相关配置" class="headerlink" title="Tips：快捷键及相关配置"></a>Tips：快捷键及相关配置</h4><p>支持快捷键command+shift+p（macOS）或者control+shift+p（windows\linux）用以支持快捷上传剪贴板里的图片（第一张）。</p><p>PicGo支持自定义快捷键，使用方法见配置手册。</p><p>注：可以将快捷键设置为ctrl+shift+c</p><p>总结<br>将上面的步骤都设置好，每次截图之后，都可以按一下ctrl+shift+c，这样就会将剪切板上面的截图转化为在线网络图片链接，简直就是爽的不要不要的，关键是背靠 GitHub ，比自建服务器都稳！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo_Themes</title>
      <link href="/2022/07/07/Hexo%20_Themes/"/>
      <url>/2022/07/07/Hexo%20_Themes/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。这个是模版的<a href="https://fushaolei.github.io/hexo-theme-white/archives/">demo</a>和<a href="https://github.com/FuShaoLei/hexo-theme-white">github仓库</a></p><h3 id="white主题配置（目前只学会用一个）"><a href="#white主题配置（目前只学会用一个）" class="headerlink" title="white主题配置（目前只学会用一个）"></a><a href="https://github.com/MagicTmac1/hexo-theme-white">white</a>主题配置（目前只学会用一个）</h3><p>进入站点目录下的themes目录，将主题包下载到本地，然后修改站点配置文件_config.yml中的theme为下载下来的主题包的名字（<strong>这两个一定要相同！</strong>）</p><h2 id=""><a href="#" class="headerlink" title=""></a>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102353818.png" >        </sapn>              <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102355498.png" >        </sapn>      </h2><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote><p>其实config文件里写的很明白了，现在就重新列一下，添加一些不必要的说明</p></blockquote><h3 id="可自定义style"><a href="#可自定义style" class="headerlink" title="可自定义style"></a>可自定义style</h3><pre><code class="yml">############## style ##############style:  layout:    max-width: 1130px #总体宽度    post-max-width: 800px #文章内容宽度  color:    theme-main: &quot;#1A98FF&quot; # 主色调    theme-secondary: &quot;#DDF0FF&quot; # 次色调    text-main: &quot;#333333&quot; # 文字主色调    text-secondary: &quot;#898FA0&quot; # 文字次色调  animation:    open: true # 如果开启动画的话会引入animation.css</code></pre><h3 id="主页配置"><a href="#主页配置" class="headerlink" title="主页配置"></a>主页配置</h3><h4 id="home页和archive可选配置"><a href="#home页和archive可选配置" class="headerlink" title="home页和archive可选配置"></a>home页和archive可选配置</h4><pre><code class="yml"># home页可选类型home:  type: &quot;img&quot; # 主页的类型，可选 home | img | simple# archive页可选类型archive:  type: &quot;simple&quot; # archive的类型，可选 img | simple</code></pre><p>type为home就是一个封面，为img就是图片加标题的形式，simple就是极简模式</p><h3 id="随机cover"><a href="#随机cover" class="headerlink" title="随机cover"></a>随机cover</h3><p>当你懒的找封面而又想用img模式的时候，我为你准备了些随机封面</p><pre><code class="yml">archive_img_mode:  default_cover: #默认的cover    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/01.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/02.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/03.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/04.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/05.jpg    - https://cdn.jsdelivr.net/gh/fushaolei/cdn-white@1.0/cover/06.jpg</code></pre><blockquote><p>图片均来自于bing的每日图片，版权归图片原作者所有，我只是搬到了自己的仓库方便使用，如果有侵犯到你的权益，请和我联系 ( •̀ ω •́ )</p></blockquote><h3 id="浏览器标签页配置"><a href="#浏览器标签页配置" class="headerlink" title="浏览器标签页配置"></a>浏览器标签页配置</h3><pre><code class="yml"># iconicon:  #标签页图标，这里可填链接（可以直接将图片地址拿过来，我拿的百度小黄鸭的）#  headersite_name: white（对应下面的这个浏览器标签）</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102356109.png" >        </sapn>      </p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><pre><code class="yml">menu:  HOME: /  BLOG: /archives</code></pre><h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><pre><code class="yml">## 本地搜索search:  open: false # 是否开启  page: /search # 页面路径（通常命名为search）</code></pre><p>如果你想使用的话，请先到根目录执行</p><pre><code class="npm">npm install hexo-generator-search --save</code></pre><p>然后新建一个名为search的page</p><pre><code class="npm">hexo new page &quot;search&quot;</code></pre><p>进入这个文件夹，更改它的<code>index.md</code>文件，示例如下</p><pre><code class="md">---layout: searchcover: #你还可以自定义cover---</code></pre><p>然后将open设置为true即可开启</p><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><blockquote><p>当你的home页有用到type home模式的话 请配置此项</p></blockquote><pre><code class="yml"># 自我介绍intro:  title: Hi.I&#39;m White.  sub: &#39;A [White](https://github.com/FuShaoLei/hexo-theme-white) theme for [Hexo](http://hexo.io/)&#39; # markdown语法  avator: https://cdn.jsdelivr.net/gh/fushaolei/img/20200524104925.jpg #头像 暂时还没用到  author: white #所有文章的默认作者</code></pre><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><pre><code class="yml">#联系方式  #更多图标：https://remixicon.com/contact:  Github:    - https://github.com/MagicTmac1/hexo-theme-white    - ri-github-line  Email:     - mailto:ouyangcan@163.com    - ri-mail-line</code></pre><p>格式就是</p><pre><code class="yml">名字:  - 链接  - 图标 </code></pre><h3 id="文章toc设置"><a href="#文章toc设置" class="headerlink" title="文章toc设置"></a>文章toc设置</h3><pre><code class="yml"># 文章toc索引栏设置toc:  open: true # 是否开启  side: true  # 选择toc的位置，填true的话toc将会显示在文章的侧边，填false的话 toc将出现在文章的开头  max: 2 #最大深度  min: 2 #最小深度</code></pre><p>其中side如果设置为false的话，将会出现在文章的top部分，如果设置为true的话，将会出现在侧边 min设置的是最小深度，max设置的是最大深度，<del>如上面配置所示，min为2，说明h2索引是至少要出现的，不会出现h1索引 （ 突然不知道怎么表达，</del> 如果不理解的话建议你试试 😂</p><h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><p>代码高亮，想要使用代码高亮，得先把根目录的**<code>_config.yml</code>里的highlight的enable置成false**</p><pre><code class="yml"># 插件plugins:  highlightjs:    js: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.1/build/highlight.min.js    css: https://cdn.jsdelivr.net/npm/highlight.js@10.1.1/styles/github.css    # more: https://www.jsdelivr.com/package/npm/highlight.js?path=styles</code></pre><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><pre><code class="yml"># 评论系统设置comments:  open: false #是否开启评论系统  system: gitalk #选择评论系统 可选 valine gitalk livere  # Valine  valine:    appid: #Leancloud应用的AppID  这里和下面的要换成你自己的啊QAQ    appkey: #Leancloud应用的AppKey    verify: false #验证码    notify: true #评论回复提醒    avatar: robohash #评论列表头像样式：&#39;&#39;/mm/identicon/monsterid/wavatar/retro/hide    #头像类型可见： https://valine.js.org/avatar.html    placeholder: 留下你来过的痕迹~ #评论框占位符  # Gitalk  gitalk:    owner:  #Github 用户名,    repo:  #储存评论issue的github仓库名    admin:  #Github 用户名    clientID:  #`Github Application clientID`    clientSecret: #`Github Application clientSecret`  #livere  livere: # 前往 http://livere.com/ 申请账号    dataId: city #免费版本city    dataUid: #安装代码中 data-uid 后面数据</code></pre><h3 id="Gitalk配置教程"><a href="#Gitalk配置教程" class="headerlink" title="Gitalk配置教程"></a>Gitalk配置教程</h3><p>先配置一下 Git <a href="https://github.com/settings/developers">https://github.com/settings/developers</a> 然后选择 OAuth Apps 点击 New OAuth App，        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102356423.png" >        </sapn>      </p><p>这里注意HomePage URL和callback URL一定要一样！</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102357218.png" >        </sapn>      </p><p>做完这些基本就ok了，然后点进去绑定初始化一下，就完成啦！        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102357442.png" >        </sapn>      </p><blockquote><p><strong>这里写一下遇到的一些问题吧</strong></p><p>gitalk的坑，一个是repo这里 写的应该是<strong>仓库名</strong>，而不是仓库链接或者其他的东西，然后gitalk要上线部署一次才可以，md文件名字最好用英文来命名，如果用中文的话，超出50个字符将会初始化失败，<a href="https://blog.csdn.net/Keith_Prime/article/details/111604291">Gitalk Error: Validation Failed</a>。</p><p>在讲gitalk进行初始化的时候，repo其实不需要重新创建一个仓库（我一开始创建了一个仓库，写的那个仓库的名称，一直出现那个<code>NetWork Error</code>的报错，后来我改成我用来当站点的那个仓库的名称就ok了🤔）</p><p>当我试着把原来的中文名称改为英文时，出现了404的错误，要记得把下图所示的两个地方改为相同的，不然就会出错。将md文件名重新换一个名字，md文档里面的<code>title</code>也要更换。再进行<code>hexo cl</code>、<code>hexo g</code> 、<code>hexo d</code>。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207102357946.png" >        </sapn>      </p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code class="yml"># 页脚footer: Power by [Hexo](http://hexo.io/) Theme by [White](https://github.com/FuShaoLei/hexo-theme-white) # markdown语法#有分类时是否开启menu分类页和自定义名字menu_categories:  open: true  name: 分类#可自定义归档标签页名字 archive_tab_name: Blog#图片懒加载lazyload:  open: true #是否开启</code></pre><p>这里就不bb了 大家应该看的懂</p><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>因为主题的更新比较频繁，所以如果你想舒服用到最新的版本的话，就请使用平滑升级</p><ol><li>在你<strong>根目录</strong>下的<code>source</code>文件夹下新建一个名为<code>_data</code>的<strong>文件夹</strong></li><li>复制<strong>主题文件夹</strong>下的<code>_config.yml</code>到<code>_data</code>文件夹下，重命名为<code>white.yml</code></li></ol><p>好了，到这里差不多完成了，以后你需要改动什么，只需要在这个<code>white.yml</code>中进行修改(在编译时，会自动将此替换<code>_config.yml</code>)</p><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>当你看到我的主题有<a href="https://github.com/FuShaoLei/hexo-theme-white/issues/3">变更</a>时，在主题文件中执行<code>git pull</code>拉取最新代码 然后，对比最新主题文件夹下的<code>_config.yml</code> 看看有无新增什么东西，添加到你的<code>white.yml</code>中即可</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo blog build</title>
      <link href="/2022/07/07/Github+Hexo%20blog%20build%20/"/>
      <url>/2022/07/07/Github+Hexo%20blog%20build%20/</url>
      
        <content type="html"><![CDATA[<p>前期准备</p><pre><code>1. Github账号，并创建一个置顶名字的远程仓库。2. Homebrew套件管理器3. Node，Git，Hexo4. NexT主题配置</code></pre><h2 id="1-Github上创建远程仓库"><a href="#1-Github上创建远程仓库" class="headerlink" title="1.Github上创建远程仓库"></a>1.Github上创建远程仓库</h2><p>首先要在Github上创建一个新的指定命名的远程仓库（当然没有账号要先注册啦）</p><p>按照如图所示的方式创建Repository。        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110002698.png" >        </sapn>      </p><p><strong>使用Git Pages配置远程仓库</strong><br>在不购买服务器的前提下，我们的网站需要挂在<a href="https://pages.github.com/">GitHub Pages</a>上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。</p><p>进入GitHub Pages里面有帮助文档，一步步做，完成后就能在浏览器打开<a href="http://username.github.io了./">http://username.github.io了。</a></p><p>我这里使用ssh，因为后续不需要再次使用密码进行部署。</p><pre><code>1.cd ~/.ssh2.ssh-keygen -t rsa -C &quot;ouyangcan0127@163.com&quot;</code></pre><p>然后一直回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH 公钥 ：将刚复制的内容粘贴到那里，title随便填，保存。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110003640.png" >        </sapn>      </p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110003360.png" >        </sapn>      </p><h2 id="2-HomeBrew-Git-hexo-npm套件安装"><a href="#2-HomeBrew-Git-hexo-npm套件安装" class="headerlink" title="2.HomeBrew ,Git,hexo,npm套件安装"></a>2.HomeBrew ,Git,hexo,npm套件安装</h2><pre><code>1.自行安装homebrew，然后可通过brew安装git和node.jsbrew install gitbrew install node</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110004866.png" >        </sapn>      </p><pre><code>2.npm install -g hexo-cli  </code></pre><p>安装Hexo<br>安装完Node.js 及 Git 后，即可使用npm来安装Hexo：</p><pre><code>$ npm install -g hexo-cli  </code></pre><p>初始化Hexo<br>创建一个目录用来作为你的blog目录，例如 blog；并在该目录中进行Hexo的初始化：</p><pre><code>$ hexo init blog(可能会卡顿，卡顿的话就先创建blog文件夹，进入blog进行hexo init)$ cd ~/blog/$ npm install</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110004469.png" >        </sapn>      </p><p>新建完成后，得到以下目录：</p><pre><code>·|-- _config.yml|-- package.json|-- scaffolds|-- source|   |-- _drafts|   |-- _posts|-- themes</code></pre><p>至此，你就完成了Hexo的安装及初始化，接下来我们就可以进行本地的预览啦：<br>先安装hexo server</p><pre><code>$ npm install hexo-server</code></pre><p>然后生成静态页面并打开hexo本地服务</p><pre><code>$ hexo generate   (或 hexo g)$ hexo server</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110005787.png" >        </sapn>      </p><p>按命令行提示，打开 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到默认主题的默认页面了。<br>可能加载会很慢，因为默认主题中使用了些Google的资源，后面更换主题就会快很多了。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110006186.png" >        </sapn>      </p><h2 id="3-配置远程仓库"><a href="#3-配置远程仓库" class="headerlink" title="3.配置远程仓库"></a>3.配置远程仓库</h2><p>打开前面创建的blog目录下的 <strong>_config.yml</strong> 文件，在修改最下方的<strong>deploy</strong>为：（<strong>注意，冒号后面一定要加空格</strong>）</p><pre><code>deploy:  type: git  repo: git@gitee.com:ouyang-can/blog.github.io.git(这里填ssh链接)  branch: main（这里不要写master了，那是老版本）</code></pre><p>下来安装hexo的git部署，在命令行中执行：</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>最后，将生成静态页面并部署到github的仓库中，执行：</p><pre><code>$ hexo d -g 或者$ hexo generate$ hexo deploy</code></pre><p>当提示 <strong>INFO Deploy done: git</strong> 即上传成功，这时就可以通过仓库地址来访问你的个人站点了。<br>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/MagicTmac1/Picture_repo/master/202207110007057.png" >        </sapn>      </p><h3 id="常用Hexo命令"><a href="#常用Hexo命令" class="headerlink" title="常用Hexo命令"></a>常用Hexo命令</h3><pre><code>hexo init       //在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件hexo new “my new blog title”   //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 hexo new page &lt;pagename&gt;  //新建一个网页。生成网页后的路径会在终端中有提示default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。hexo clean      // 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存hexo generate   // 可以简写成hexo g 根据markdown文件生成静态文件hexo server     // 或者简写成hexo s 启动本地hexo 服务器，默认localhost:4000可以访问hexo deploy     // 或者简写成hexo d 将本地修改，部署到远端hexo version    // 显示hexo版本</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
